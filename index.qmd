---
format:
  html:
    theme:
    - source/custom.scss
    - none
execute:
  echo: false
  output: true
resource_files:
- index.html
---

::: setup
{{< include source/scrollytelling.qmd >}}

```{r}
#| include: false
# Read functions & packages
# Only the github version of leaflet supports terra, in place of raster, which is now required as sp (on which raster depends) is being deprecated
# devtools::install_github('rstudio/leaflet')
source("source/fns.R")
source("source/helpers.R")

city_dir <- file.path("mnt/", readLines("city-dir.txt"))
user_input_dir <- file.path(city_dir, "01-user-input/")
process_output_dir <- file.path(city_dir, "02-process-output/")
spatial_dir <- file.path(process_output_dir, "spatial/")
output_dir <- file.path(city_dir, "03-render-output/")
styled_maps_dir <- "generated/styled-maps/"

# City parameters
city_params <- read_yaml(file.path(user_input_dir, "city_inputs.yml"))
# cities <- list.files("cities")
city <- city_params$city_name
city_string <- tolower(city) %>% stringr::str_replace_all(" ", "-")
country <- city_params$country

# Load map layer parameters
layer_params <- read_yaml('source/layers.yml')
```

```{r}
#| include: false
# Visualization parameters (Am I using all of them?)
# Interactive Plots (Leaflet)
basemap_opacity <- 0.3
legend_opacity <- 0.8
vwidth <- 900
vheight <- vwidth

# Static map
layer_alpha <- 0.8
map_width <- 6.9
map_height <- 5.9
aspect_ratio <- map_width / map_height

# this is to enable fractional zoom in mapshot
#useragent <- 'Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET #CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'
```

---
title: "`r paste(city, country, sep = ' ')` Neighborhood Scan"
---

```{r}
# Get text#

city_text <- read_md(file.path(user_input_dir, "text-files/manual-text.md"))
generic_text <- read_yaml("source/generic-text_old.yml")
slide_texts <- merge_lists(city_text, generic_text)
```

```{r}
#| include: false

# Define the AOI
aoi <- st_zm(st_read(file.path(user_input_dir, "namangan_center.shp")))
aoi_bounds <- st_bbox(aoi)
static_map_bounds <- aspect_buffer(aoi, aspect_ratio, buffer_percent = 0.05)

# Create basemaps
## Interactive: Inititate the map here, will build on it in each "slide"
all_maps <- plot_basemap("vector")
## Static:
zoom <- round(14.6 + -0.00015 * units::drop_units(sqrt(st_area(aoi))))
tiles <- annotation_map_tile(type = "cartolight", zoom = zoom)

# Keep track of added layers
added_layers <- c()
```
:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("index.qmd") %>%
  subset(str_detect(., "^##")) %>% str_replace("# ", "- ") %>% str_replace_all("#", "  ")

anchors <- sections %>% str_extract("^\\s*- (.*$)", group = T) %>% tolower() %>% str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  str_replace("(.*)", "(#\\1)")

# paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>Neighborhood Scan</span>  &or;", ., sep = "\n") }

paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>Neighborhood Scan</span>  &or;", ., sep = "\n") }
```

[Inputs version]
:::
:::

::: text-column
# {{< meta title >}}

## Executive Summary

```{r}
#| output: asis
print_slide_text(slide_texts$executive_summary$executive_summary)
```

## Setting the Context

### Basic City Information

```{r}
# Add a map layer? But it's just the AOI
```

```{r}
#| output: asis
print_slide_text(slide_texts$setting_the_context$basic_city_info)
```

### The State of Urban Infrastructure and Service Delivery

```{r}
#| output: asis
print_slide_text(slide_texts$setting_the_context$infrastructure_and_service_delivery)
```

## Urban Cover Dynamics

### Land Cover

```{r, warning=FALSE, echo=FALSE}
#| include: false
# land_cover2011 <- fuzzy_read(spatial_dir, "y2011_NamanganC_LULC.tif", rast)
# values(land_cover2011)[values(land_cover2011) == 0] <- NA
land_cover11 <- rast("mnt/2024-country-city/02-process-output/spatial/y2011_NamanganC_LULC.tif")
values(land_cover11)[values(land_cover11) == 0] <- NA
# 
# land_cover2017 <- fuzzy_read(spatial_dir, "y2017_NamanganC_LULC.tif", rast)
# values(land_cover2017)[values(land_cover2017) == 0] <- NA
land_cover17 <- rast("mnt/2024-country-city/02-process-output/spatial/y2017_NamanganC_LULC.tif")
values(land_cover17)[values(land_cover17) == 0] <- NA

#land_cover <- fuzzy_read(spatial_dir, "y2023_NamanganC_LULC.tif", rast)
land_cover23 <- rast("mnt/2024-country-city/02-process-output/spatial/y2023_NamanganC_LULC.tif")
values(land_cover23)[values(land_cover23) == 0] <- NA

#library(raster)
#  ext <- extent(c(71.64, 71.66, 41, 41.01))
# land_cover <- crop(land_cover, ext)
 land_cover_rs11 <- land_cover11%>%
  aggregate(fact = 10, fun = "modal")
 
  land_cover_rs17 <- land_cover17%>%
  aggregate(fact = 10, fun = "modal")
  
   land_cover_rs23 <- land_cover23%>%
  aggregate(fact = 10, fun = "modal")

#    landcover <- c(land_cover_rs11, land_cover_rs17, land_cover_rs17)
# names(landcover) <- c("2011", "2017", "2023")

#class <- matrix(c(1, 1.9, 1, 1.9, 2.9, 2, 2.9, 3.9, 3,3.9, 4.9, 4, 4.9, 5, 5), ncol =3 , byrow = T)
#land_cover_resample_reclass <- classify(land_cover_resample, class)

# Interactive Plot (Leaflet)
add_land_cover_layer <- create_layer_function(data =rast_as_vect(land_cover_rs23), yaml_key = "land_cover")
all_maps <- add_land_cover_layer(all_maps)
added_layers <- c(added_layers, "land-cover")

# Static plot (PNG)
#plot_land_cover2011 <- plot_static(data = land_cover2011, yaml_key = "land_cover")
#plot_land_cover2017 <- plot_static(data = land_cover2017, yaml_key = "land_cover")
plot_land_cover <- plot_static(data = land_cover_rs23, yaml_key = "land_cover")
#save_plot(plot = plot_land_cover2011, filename = "land_cover2011.png", directory = styled_maps_dir)
#save_plot(plot = plot_land_cover2017, filename = "land_cover2017.png", directory = styled_maps_dir)
save_plot(plot = plot_land_cover, filename = "land_cover.png", directory = styled_maps_dir)
```

```{r}
#| include: false
#install.packages('magick')
library(magick)
#install.packages('rsconnect')
library(rsconnect)
 
#library(png)
ludonut2011 <- image_read("C:/World_Bank/Neighborhood-Scan-FrontEnd/Images/imagelu11.png")
ludonut2017 <- image_read("C:/World_Bank/Neighborhood-Scan-FrontEnd/Images/imagelu17.png")
ludonut2023 <- image_read("C:/World_Bank/Neighborhood-Scan-FrontEnd/Images/imagelu23.png")

land_cover11 <- fuzzy_read(spatial_dir, "y2011_NamanganC_LULC", FUN=rast)
```

```{r}
#| include: false
#library(reticulate)
#values(land_cover11)[values(land_cover11) == 0] <- NA
# 
# land_cover17 <- fuzzy_read(spatial_dir, "y2017_NamanganC_LULC", FUN=rast)
# #values(land_cover17)[values(land_cover17) == 0] <- NA
# 
# land_cover23 <- fuzzy_read(spatial_dir, "y2023_NamanganC_LULC", FUN=rast)
# #values(land_cover23)[values(land_cover23) == 0] <- NA
# 
# LULC11_17_23 <- fuzzy_read(spatial_dir, "LULC11_17_23", FUN=rast)
# #values(LULC11_17_23)[values(LULC11_17_23) == 0] <- NA

library(raster)
library(ggplot2)
library(reshape2)
library(leaflet)

# Load raster files
raster_files <- list.files(path = "path_to_your_raster_files", pattern = ".tif$", full.names = TRUE)
land_cover11 <- rast("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/y2011_NamanganC_LULC.tif")
values(land_cover11)[values(land_cover11) == 0] <- NA
land_cover17 <- rast("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/y2017_NamanganC_LULC.tif")
values(land_cover17)[values(land_cover17) == 0] <- NA
land_cover23 <- rast("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/y2023_NamanganC_LULC.tif")
values(land_cover23)[values(land_cover23) == 0] <- NA

y2017_rasample <-resample(land_cover17, land_cover11)
y2023_rasample <-resample(land_cover23, land_cover11)
y2011_resample <-resample(land_cover11, land_cover11)

raster_stack <- c(y2011_resample,y2017_rasample,y2023_rasample)
names(raster_stack) <- c("2011", "2017", "2023")

LULC <-c(y2011_resample, y2017_rasample, y2023_rasample)
names(LULC) <- c("2011", "2017", "2023")

raster_agg <- aggregate(raster_stack, fact=5, fun=modal)

# add_land_cover_stack <- create_layer_function(data =rast_as_vect(raster_agg), yaml_key = "land_cover")
# all_maps <- add_land_cover_stack(all_maps)
# added_layers <- c(added_layers, "land-cover2023")
```



```{r, warning=FALSE}
# leaflet() %>%
#   addTiles() %>%
#   addRasterImage(raster_agg[[3]], colors = c('#C62421', '#9C9085', '#277242', '#79A54F', '#2491D7'), # colorNumeric("viridis", values(raster_agg[[1]])),
#                  opacity = 0.5) %>%
#   addRasterImage(raster_agg[[2]], colors = c('#C62421', '#9C9085', '#277242', '#79A54F', '#2491D7'), # colorNumeric("viridis", values(raster_agg[[1]])),
#                  opacity = 0.5) %>%
#   addLayersControl(
#     baseGroups = names(raster_agg),
#     options = layersControlOptions(collapsed = FALSE)
#   )

```



```{r}
#| include: false
library(readr)
library(readxl)
donut2011_f <- read_csv("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/donut2011_f.csv")
donut2017_f <- read_csv("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/donut2017_f.csv")
donut2023_f <- read_csv("C:/World_Bank/Neighborhood-Scan-FrontEnd/mnt/2024-country-city/02-process-output/spatial/donut2023_f.csv")

donut_plot2011 <- 
plotly::plot_ly(data=donut2011_f, labels=~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=~Color , line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="Percent of Urban Cover 2011",
         legend = list(orientation = 'h')
         )


donut_plot2017 <- 
plotly::plot_ly(data=donut2017_f, labels=~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'label+percent',
                 marker=list(colors=~Color, line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="Percent of Urban Cover 2017",
         legend = list(orientation = 'h'))


donut_plot2023 <- 
plotly::plot_ly(data=donut2023_f, labels=~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=~Color, line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="Percent of Urban Cover 2023",
         legend = list(orientation = 'h'))

```

```{r echo=FALSE, warning=FALSE}
donut_plot2011
donut_plot2017
donut_plot2023
```

```{r, echo=FALSE, warning=FALSE}
#| include: false
library(tanaka)
library(metR)
library(tinytex)
library(networkD3)
library(webshot)
library(alluvial)
library(ggalluvial)
library(plotly)
library(mapview)
library(tidyverse)
library(viridis)
library(patchwork)
library(hrbrthemes)
library(circlize)
#library(xfun)
#updates.packages(servr)
LULC[LULC == 0] <- NA
changeras <- c(LULC[["2011"]], 
                LULC[["2023"]])

changeout <- crosstab(changeras)
changedf <- as_tibble(changeout)%>%
  filter(X2011 >= 1 & X2023 >= 1)

shortname<-c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies')
newColor <- c('#C62421', '#9C9085', '#277242', '#79A54F', '#2491D7') 

changedf1 <- changedf %>%
  mutate(X2011 = factor(X2011,
                        levels = 1:5,
                        labels = shortname),
          X2023 = factor(X2023,
                        levels = 1:5,
                        labels = shortname),
         km2 = n * 1/1000000) %>%
  group_by(X2011)

class_no <- dplyr::filter(changedf1, X2011==c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies')&X2023==c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies'))
change <- "No"
class_no$change <- change

class_yes <- dplyr::filter(changedf1, !X2011==c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies')&X2023==c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies'))
change <- "Yes"
class_yes$change <- change

changedf1 <- rbind(class_no, class_yes)
change_df2011_2023 <- as.data.frame(changedf1)
#freq_table <- changedf1 %>% group_by(X2011) 

change_class <-c('Built-up', 'Bare/sparse vegetation', 'Tree cover', 'Grassland',  'Permanent water bodies',
'Built-up', 'Built-up', 'Built-up', 'Built-up', 'Bare/sparse vegetation', 'Bare/sparse vegetation', 'Bare/sparse vegetation', 'Bare/sparse vegetation','Tree cover','Tree cover','Tree cover','Tree cover','Grassland','Grassland','Grassland','Grassland','Permanent water bodies','Permanent water bodies','Permanent water bodies','Permanent water bodies')

change_df2011_2023$change_class<-change_class

# data_long <- freq_table %>%
#   rownames_to_column %>%
#   gather(key = 'key', value = 'value', -rowname) %>%
#   filter(value > 0)
data_long <- change_df2011_2023%>%
dplyr::select(X2011, change_class, km2)%>%
as.data.frame()

colnames(data_long) <- c("source", "target", "value")
data_long$target <- paste(data_long$target, " ", sep="")

# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(name=c(as.character(data_long$source), as.character(data_long$target)) %>% unique())

# With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to reformat it.
data_long$IDsource=match(data_long$source, nodes$name)-1 
data_long$IDtarget=match(data_long$target, nodes$name)-1


# prepare colour scale
ColourScal ='d3.scaleOrdinal() .range(["#C62421", "#9C9085", "#277242", "#79A54F", "#2491D7"])'

# Make the Network
sankey_plot <- sankeyNetwork(Links = data_long, Nodes = nodes,
              Source = "IDsource", Target = "IDtarget",
              Value = "value", NodeID = "name", colourScale=ColourScal)#, nodeWidth=40, fontSize=13, nodePadding=20)
```

```{r}
#sankey_plot
htmlwidgets::onRender(sankey_plot, '
  function(el) { 
    var cols_x = this.sankey.nodes().map(d => d.x).filter((v, i, a) => a.indexOf(v) === i).sort(function(a, b){return a - b});
    var labels = ["2011", "2023"];
    cols_x.forEach((d, i) => {
      d3.select(el).select("svg")
        .append("text")
        .attr("x", d)
        .attr("y", 12)
        .text(labels[i]);
    })
  }
')
```

```{r}
#| output: asis
print_slide_text(slide_texts$built_form$land_cover)

```

## Climate Conditions

### Summer Surface Temperature

```{r}
#| include: false
summer_lst2023 <- fuzzy_read(spatial_dir, "y2023_NamanganC_LST", FUN = rast)

# Interactive Plot (Leaflet)
summer_lst_resample <- summer_lst2023 %>%
  #aggregate(fact = 4, fun = "max") %>% # Is this the right function choice?
  as.polygons(digits = 0)
add_summer_lst_layer <- create_layer_function(data = summer_lst_resample, yaml_key = "summer_lst")
all_maps <- add_summer_lst_layer(all_maps)
added_layers <- c(added_layers, "summer-surface-temperature")

# Static plot (PNG)
plot_summer_lst <- plot_static(data = summer_lst2023, yaml_key = "summer_lst")
save_plot(plot = plot_summer_lst, filename = "summer_lst.png", directory = styled_maps_dir)
```

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$summer_lst)
```

```{r}
#| include: false
### Land Cover and Temperature
LC_temp <- read.csv("mnt/2024-country-city/02-process-output/spatial/LandCoverTemp.csv")
library(ggridges)
y2011 <- LC_temp%>%
  dplyr::select(Year, Temp, classification)#%>%
 # filter(Year==2011 & classification==1)
# LC_glm <-lm(Temp~ UCover, data = y2011)
# 
# confint(LC_glm)
# summary(LC_glm)
# 
# 
# #plot(urban_gam, pages=1)
# wa_all_1 <- visreg(LC_glm, 
#                    "UCover",
#                    xlab="Urban Land Cover",
#                    ylab="Temperature",
#                    gg = T)

temp_lc <-ggplot(LC_temp, aes(x = Temp, y = class, fill = factor(Year))) +
    geom_density_ridges_gradient(aes(scale = 1.3, rel_min_height = 0.01))  +
  stat_density_ridges(quantiles =  0.5)+
 scale_fill_manual(name="Year",
                        values = c("2011" = "#e9c46a",
                               "2017" = "#f4a261",
                               "2023" = "#e76f51"))+
labs(x = "Mean Summer Temperature (°C)", 
       y = "", title= "Land Cover and Temperature") +
  theme_classic()+
theme(axis.text.x = element_text(color = "black", size = 8),
      axis.text.y = element_text(color = "black", size = 12),
      legend.text = element_text(color = "black", size = 12,),
      legend.title = element_text(color = "black", size = 12, face = "bold"),
      axis.title.x = element_text(color = "black", size = 12, face = "bold"),
      axis.title.y = element_text(color = "black", size = 12, face = "bold"))
```

```{r, echo=FALSE, warning=FALSE}
temp_lc
```

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$landcover_versus_summer_temperature)
```

### Urban Thermal Field Variance Index

```{r, echo=FALSE, warning=FALSE}
#| include: false
summer_utfvi2023 <- fuzzy_read(spatial_dir, "y2023_NamanganC_UTFVI", FUN = rast)

# Interactive Plot (Leaflet)
summer_utfvi_resample <- summer_utfvi2023 %>%
  aggregate(fact = 3, fun = "mean") #%>% # Is this the right function choice?
  #as.polygons(digits = 0)
add_summer_utfvi_layer <- create_layer_function(data = summer_utfvi_resample, yaml_key = "summer_utfvi")
all_maps <- add_summer_utfvi_layer(all_maps)
added_layers <- c(added_layers, "summer-thermal-index")

# Static plot (PNG)
plot_summer_utfvi <- plot_static(data = summer_utfvi2023, yaml_key = "summer_utfvi")
save_plot(plot = plot_summer_utfvi, filename = "summer_utfvi.png", directory = styled_maps_dir)
```

```{r}
#| include: false
UTFVI_freq2011_f <- read_csv("mnt/2024-country-city/02-process-output/spatial/UTFVI_2011.csv")
UTFVI_freq2017_f <- read_csv("mnt/2024-country-city/02-process-output/spatial/UTFVI_2017.csv")
UTFVI_freq2023_f <- read_csv("mnt/2024-country-city/02-process-output/spatial/UTFVI_2023.csv")

UTFVI_plot2011 <- plot_ly(UTFVI_freq2011_f, labels= ~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=c('#5290C2', 'lightblue', '#e9c46a', '#f4a261','#e76f51', '#D33837'), line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="UTFVI 2011")

UTFVI_plot2017 <- plot_ly(UTFVI_freq2017_f, labels=~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=~c('#5290C2', 'lightblue', '#e9c46a', '#f4a261','#e76f51', '#D33837'), line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="UTFVI 2017")

UTFVI_plot2023 <- plot_ly(UTFVI_freq2023_f, labels=~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=~c('#5290C2', 'lightblue', '#e9c46a', '#f4a261','#e76f51', '#D33837'), line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="UTFVI 2023")
```

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$summer_utfvi)
```


```{r echo=FALSE, warning=FALSE}
UTFVI_plot2011
UTFVI_plot2017
UTFVI_plot2023
```

```{r}
#| output: asis
#print_slide_text(slide_texts$climate_conditions$summer_utfvi)
```

### Vegetated Areas

```{r}
#| include: false
vegetation <- fuzzy_read(spatial_dir, "ndvi2017", rast)

# Interactive Plot (Leaflet)
vegetation_poly <- vegetation %>%
  #aggregate(fact = 5) %>% # Don't have to include it
 # aggregate(fact = 10, fun = "mean") %>%
  as.polygons(digits = 2, aggregate = T) # Is this larger with/without aggregate?
add_vegetation_layer <- create_layer_function(data = vegetation_poly, yaml_key = "vegetation")
all_maps <- add_vegetation_layer(all_maps)
added_layers <- c(added_layers, "vegetated-areas")

# Static plot (PNG)
plot_vegetation <- plot_static(data = vegetation, yaml_key = "vegetation")
save_plot(plot = plot_vegetation, filename = "vegetation.png", directory = styled_maps_dir)
```

```{r}
#| output: asis
print_slide_text(slide_texts$climate_conditions$vegetation)
```

### Elevation

```{r}
#| include: false
elevation <- fuzzy_read(spatial_dir, "Namangan_Elevation", FUN = rast)
 elevation<-elevation%>%
crop(aoi)%>%
mask(aoi)

elev_breaks <- break_pretty2(values(elevation), method = "interval")
for (i in seq_along(elev_breaks)) {
    elevation[elevation >= elev_breaks[i] & elevation < c(elev_breaks, 1e6)[i+1]] <- elev_breaks[i]
}
elevation <- as.polygons(elevation)

# Interactive Plot (Leaflet)
add_elevation_layer <- create_layer_function(data = elevation, yaml_key = "elevation")
all_maps <- add_elevation_layer(all_maps)
added_layers <- c(added_layers, "elevation")

# Static plot (PNG)
plot_elevation <- plot_static(data = elevation, yaml_key = "elevation", breaks = elev_breaks)
save_plot(plot = plot_elevation, filename = "elevation.png", directory = styled_maps_dir)
```

```{r}
#| include: false
Elevation_Dem <- read_csv("mnt/2024-country-city/02-process-output/spatial/Elevation.csv")

Elevation_plot <- plot_ly(Elevation_Dem , labels= ~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=c('#F5C4C0', '#DCA3B1', '#C283A2', '#A96293', '#8F4284', '#762175'),
line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="Elevation")
```

```{r echo=FALSE, warning=FALSE}
Elevation_plot
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$elevation)
```

### Slope

```{r}
#| include: false
# FIX: Currently plotting as raster because much faster, but => no label on hover
slope <- fuzzy_read(spatial_dir, "Namangan_Elevation", FUN = rast) %>%
  terrain(v="slope")%>%
  crop(aoi)%>%
  mask(aoi)

# Interactive Plot (Leaflet)
add_slope_layer <- create_layer_function(data = slope, yaml_key = "slope")
all_maps <- add_slope_layer(all_maps)
added_layers <- c(added_layers, "slope")

# Static plot (PNG)
plot_slope <- plot_static(data = slope, yaml_key = "slope")
save_plot(plot = plot_slope, filename = "slope.png", directory = styled_maps_dir)
```

```{r}
#| include: false
Slope <- read_csv("mnt/2024-country-city/02-process-output/spatial/Slope.csv")

Slope_plot <- plot_ly(Slope  , labels= ~Description, 
                          values=~percentage, sort=FALSE,
                          textposition = "inside", textinfo = 'percent',
                 marker=list(colors=c('#FFFFD4', '#E6CCA0', '#CC9A6C', '#B36738', '#993404'), line=list(color="black", width=1)))%>%
  add_pie(hole=0.6)%>%
  layout(title="Slope")
```

```{r echo=FALSE, warning=FALSE}
Slope_plot
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$slope)
```

### Moisture

```{r}
#| include: false
moisture <- fuzzy_read(spatial_dir, "ndmi2017", rast)

# Interactive Plot (Leaflet)
moisture_poly <- moisture %>%
  #aggregate(fact = 5) %>%
  as.polygons(digits =2, aggregate = T) # Is this larger with/without aggregate?
add_moisture_layer <- create_layer_function(data = moisture_poly, yaml_key = "moisture")
all_maps <- add_moisture_layer(all_maps)
added_layers <- c(added_layers, "moisture")

# Static plot (PNG)
plot_moisture <- plot_static(data = moisture_poly, yaml_key = "moisture")
save_plot(plot = plot_moisture, filename = "moisture.png", directory = styled_maps_dir)
```

```{r}
#| output: asis
print_slide_text(slide_texts$risk_identification$moisture)
```

```{r}
#| output: asis
##print_slide_text(slide_texts$risk_identification$fwi)
```
:::

::: maps
```{r}
#| output: true
all_maps %>%
  add_aoi() %>%
  addLayersControl(
    overlayGroups = added_layers,
    options = layersControlOptions(collapsed = TRUE))

  # If I want to use javascript directly I could use htmlwidgets::onRender(),
  # or maybe just an observable cell
```
:::
